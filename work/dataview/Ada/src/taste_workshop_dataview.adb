pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
pragma Warnings (Off, "redundant with clause in body");
pragma Warnings (On, "redundant with clause in body");

package body TASTE_WORKSHOP_DATAVIEW with SPARK_Mode is



pragma Warnings (Off, "condition can only be False if invalid values present");
pragma Warnings (Off, "condition can only be True if invalid values present");


function asn1SccMyInteger_Equal (val1, val2 :  asn1SccMyInteger) return Boolean
is

begin
	return val1 = val2;

end asn1SccMyInteger_Equal;

function asn1SccMyInteger_IsConstraintValid(val : asn1SccMyInteger) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := (val <= 10000);
    ret.ErrorCode := (if ret.Success then 0 else ERR_MYINTEGER);
    return ret;
end asn1SccMyInteger_IsConstraintValid;

function asn1SccMyInteger_Init return asn1SccMyInteger
is
    val: asn1SccMyInteger;
begin
    val := 0;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccMyInteger_Init;



function asn1SccAcceleration_Equal (val1, val2 :  asn1SccAcceleration) return Boolean
is

begin
	return adaasn1rtl.Asn1Real_Equal(val1, val2);

end asn1SccAcceleration_Equal;

function asn1SccAcceleration_IsConstraintValid(val : asn1SccAcceleration) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := ((0.0000000000000000000E+000 <= val) AND (val <= 1.0000000000000000000E+002));
    ret.ErrorCode := (if ret.Success then 0 else ERR_ACCELERATION);
    return ret;
end asn1SccAcceleration_IsConstraintValid;

function asn1SccAcceleration_Init return asn1SccAcceleration
is
    val: asn1SccAcceleration;
begin
    val := 0.0000000000000000000E+000;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccAcceleration_Init;



function asn1SccVelocity_Equal (val1, val2 :  asn1SccVelocity) return Boolean
is

begin
	return adaasn1rtl.Asn1Real_Equal(val1, val2);

end asn1SccVelocity_Equal;

function asn1SccVelocity_IsConstraintValid(val : asn1SccVelocity) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := ((0.0000000000000000000E+000 <= val) AND (val <= 1.0000000000000000000E+003));
    ret.ErrorCode := (if ret.Success then 0 else ERR_VELOCITY);
    return ret;
end asn1SccVelocity_IsConstraintValid;

function asn1SccVelocity_Init return asn1SccVelocity
is
    val: asn1SccVelocity;
begin
    val := 0.0000000000000000000E+000;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccVelocity_Init;



function asn1SccAltitude_Equal (val1, val2 :  asn1SccAltitude) return Boolean
is

begin
	return adaasn1rtl.Asn1Real_Equal(val1, val2);

end asn1SccAltitude_Equal;

function asn1SccAltitude_IsConstraintValid(val : asn1SccAltitude) return adaasn1rtl.ASN1_RESULT
is
    pragma Warnings (Off, "initialization of ret has no effect");        
    ret : adaasn1rtl.ASN1_RESULT := adaasn1rtl.ASN1_RESULT'(Success => true, ErrorCode => 0);
    pragma Warnings (On, "initialization of ret has no effect");        
begin
    ret.Success := ((0.0000000000000000000E+000 <= val) AND (val <= 1.0000000000000000000E+004));
    ret.ErrorCode := (if ret.Success then 0 else ERR_ALTITUDE);
    return ret;
end asn1SccAltitude_IsConstraintValid;

function asn1SccAltitude_Init return asn1SccAltitude
is
    val: asn1SccAltitude;
begin
    val := 0.0000000000000000000E+000;
	pragma Warnings (Off, "object ""val"" is always");
    return val;
	pragma Warnings (On, "object ""val"" is always");
end asn1SccAltitude_Init;


pragma Warnings (On, "condition can only be False if invalid values present");
pragma Warnings (On, "condition can only be True if invalid values present");

 
end TASTE_WORKSHOP_DATAVIEW;