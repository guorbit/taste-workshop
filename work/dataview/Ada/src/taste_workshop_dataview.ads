pragma Style_Checks (Off);
--  Code automatically generated by asn1scc tool
with adaasn1rtl;


pragma Warnings (Off, "unit ""System"" is not referenced");
with System;
pragma Warnings (On, "unit ""System"" is not referenced");

pragma Warnings (Off, "use clause for package ""adaasn1rtl"" has no effect");
use adaasn1rtl;
pragma Warnings (On, "use clause for package ""adaasn1rtl"" has no effect");

pragma Warnings (Off, "use clause for type");
pragma Warnings (Off, "is already use-visible through package use clause at line");
use type adaasn1rtl.OctetBuffer;
use type adaasn1rtl.BitArray;
use type adaasn1rtl.Asn1UInt;
use type adaasn1rtl.Asn1Int;
use type adaasn1rtl.BIT;
pragma Warnings (On, "use clause for type");
pragma Warnings (On, "is already use-visible through package use clause at line");



package TASTE_WORKSHOP_DATAVIEW with SPARK_Mode
is


subtype asn1SccMyInteger is adaasn1rtl.Asn1UInt range 0 .. 10000;


function asn1SccMyInteger_Equal(val1, val2 : asn1SccMyInteger) return Boolean;

ERR_MYINTEGER:constant Integer := 31; -- (0 .. 10000)
function asn1SccMyInteger_IsConstraintValid(val : asn1SccMyInteger) return adaasn1rtl.ASN1_RESULT;

function asn1SccMyInteger_Init return asn1SccMyInteger;
subtype asn1SccAcceleration is adaasn1rtl.Asn1Real;


function asn1SccAcceleration_Equal(val1, val2 : asn1SccAcceleration) return Boolean;

ERR_ACCELERATION:constant Integer := 36; -- (0..100)
function asn1SccAcceleration_IsConstraintValid(val : asn1SccAcceleration) return adaasn1rtl.ASN1_RESULT;

function asn1SccAcceleration_Init return asn1SccAcceleration;
subtype asn1SccVelocity is adaasn1rtl.Asn1Real;


function asn1SccVelocity_Equal(val1, val2 : asn1SccVelocity) return Boolean;

ERR_VELOCITY:constant Integer := 41; -- (0..1000)
function asn1SccVelocity_IsConstraintValid(val : asn1SccVelocity) return adaasn1rtl.ASN1_RESULT;

function asn1SccVelocity_Init return asn1SccVelocity;
subtype asn1SccAltitude is adaasn1rtl.Asn1Real;


function asn1SccAltitude_Equal(val1, val2 : asn1SccAltitude) return Boolean;

ERR_ALTITUDE:constant Integer := 46; -- (0..10000)
function asn1SccAltitude_IsConstraintValid(val : asn1SccAltitude) return adaasn1rtl.ASN1_RESULT;

function asn1SccAltitude_Init return asn1SccAltitude;
pragma Warnings (Off, "there are no others");
 
pragma Warnings (On, "there are no others");
private
   --# hide TASTE_WORKSHOP_DATAVIEW;


end TASTE_WORKSHOP_DATAVIEW;